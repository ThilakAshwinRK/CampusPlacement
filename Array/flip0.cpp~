// C++ program to find positions of zeroes flipping which
// produces maximum number of xonsecutive 1's
#include<bits/stdc++.h>
//#include <unordered_set>
//#include <tr1/unordered_set>
using namespace std;
 
// m is maximum of number zeroes allowed to flip
// n is size of array
unordered_set<int> k;
unordered_set<int> v;
unordered_map <int,int>m;
void findZeroes(int arr[], int n, int m)
{
int sum=arr[n-1];
for(int i=n-2;i>=0;i--)
    {
       if(arr[i]>0)
          {arr[i]+=sum;sum++;}
       else
         sum=0;
    }
for(int i=0;i<n;i++)
  cout<<arr[i]<<endl;
for(int i=0;i<n;i++)
{
   if(arr[i]==0 && i!=0 && i!=n-1)
         {k.insert(i);v.insert(arr[i]+arr[i+1]+arr[i-1]+1); m.insert(make_pair(i,arr[i]+arr[i+1]+arr[i-1]+1);}
    else
   if(arr[i]==0 && i==0 && i!=n-1)
         {k.insert(i);v.insert(arr[i]+arr[i+1]+1);}
    else
if(arr[i]==0 && i!=0 && i==n-1)
         {k.insert(i);v.insert(arr[i]+arr[i-1]+1);}     
}
int i=0;
for ( auto it = k.cbegin(); it != k.cend(); ++it)
    std::cout << " " << *it;    // cannot modify *it
  std::cout << std::endl;
for ( auto it = v.cbegin(); it != v.cend() ; ++it)
    std::cout << " " << *it;    // cannot modify *it
  std::cout << std::endl;
for ( auto it = k.cbegin(); it != k.cend() && i<m; ++it ,i++)
    std::cout << " " << *it;    // cannot modify *it
  std::cout << std::endl;

}
 
// Driver program
int main()
{
   int arr[] ={1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1};
   int m = 2;
   int n =  sizeof(arr)/sizeof(arr[0]);
   cout << "Indexes of zeroes to be flipped are ";
   findZeroes(arr, n, m);
   return 0;
}
